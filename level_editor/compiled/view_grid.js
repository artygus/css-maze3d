// Generated by CoffeeScript 1.7.1

/*
  Level grid
 */

(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  levelEditor.view.Grid = (function(_super) {
    __extends(Grid, _super);

    Grid.prototype.DT = "levelEditor.view.Grid";

    function Grid(app) {
      this.app = app;
      this.templateRow = __bind(this.templateRow, this);
      this.templateCell = __bind(this.templateCell, this);
      this.template = __bind(this.template, this);
      this.drawInitially = __bind(this.drawInitially, this);
      Grid.__super__.constructor.apply(this, arguments);
      console.log(this.DT, "Init.");
      this.drawInitially();
    }

    Grid.prototype.GRID_SIZE = 100;

    Grid.prototype.drawInitially = function() {
      var cols, i, ii, j, rows, _i, _j, _ref, _ref1;
      rows = "";
      for (i = _i = 1, _ref = this.GRID_SIZE; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        cols = '';
        ii = i.toString();
        for (j = _j = 1, _ref1 = this.GRID_SIZE; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 1 <= _ref1 ? ++_j : --_j) {
          cols += this.templateCell(j, ii);
        }
        rows += this.templateRow(cols);
      }
      this.el = $(this.template(rows));
      return this.app.el.append(this.el);
    };

    Grid.prototype.template = function(rows) {
      return "<div class=\"grid\">\n  " + rows + "\n</div>";
    };

    Grid.prototype.templateCell = function(x, y) {
      var xy;
      xy = "x=\"" + x + "\" y=\"" + y + "\"";
      return "<div class=\"grid__col\" " + xy + " cell></div>";
    };

    Grid.prototype.templateRow = function(cols) {
      return "<div class=\"grid__row\">" + cols + "</div>";
    };

    return Grid;

  })(levelEditor.Object);

}).call(this);
