// Generated by CoffeeScript 1.7.1

/*
  Level grid
 */

(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  levelEditor.view.Grid = (function(_super) {
    __extends(Grid, _super);

    Grid.prototype.DT = "levelEditor.view.Grid";

    function Grid(app) {
      this.app = app;
      this.templateRow = __bind(this.templateRow, this);
      this.templateCell = __bind(this.templateCell, this);
      this.template = __bind(this.template, this);
      this.interactionMouseMove = __bind(this.interactionMouseMove, this);
      this.drawPosition = __bind(this.drawPosition, this);
      this.drawInitially = __bind(this.drawInitially, this);
      Grid.__super__.constructor.apply(this, arguments);
      console.log(this.DT, "Init.");
      this.drawInitially();
      this.drawPosition();
      this.interactionMouseMove();
      $(this.app.data).on(this.app.data.s.I_DATA_CHANGED, (function(_this) {
        return function(v) {
          switch (v.key) {
            case "gridOffsetX":
            case "gridOffsetY":
              return _this.drawPosition();
          }
        };
      })(this));
    }

    Grid.prototype.GRID_SIZE = 100;

    Grid.prototype.drawInitially = function() {
      var cols, i, ii, j, rows, _i, _j, _ref, _ref1;
      rows = "";
      for (i = _i = 1, _ref = this.GRID_SIZE; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        cols = '';
        ii = i.toString();
        for (j = _j = 1, _ref1 = this.GRID_SIZE; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 1 <= _ref1 ? ++_j : --_j) {
          cols += this.templateCell(j, ii);
        }
        rows += this.templateRow(cols);
      }
      this.el = $(this.template(rows));
      return this.app.el.append(this.el);
    };

    Grid.prototype.drawPosition = function() {
      return this.el.css({
        left: this.app.data.get("gridOffsetX"),
        top: this.app.data.get("gridOffsetY")
      });
    };

    Grid.prototype.interactionMouseMove = function() {
      var mdown, mmove, mouse, mup, prevx, prevy;
      mdown = $(document).asEventStream("mousedown").filter((function(_this) {
        return function(e) {
          return e.which === 1;
        };
      })(this)).map((function(_this) {
        return function() {
          return {
            mstate: "down"
          };
        };
      })(this));
      mup = $(document).asEventStream("mouseup").map((function(_this) {
        return function() {
          return {
            mstate: "up"
          };
        };
      })(this));
      mmove = $(document).asEventStream("mousemove").map((function(_this) {
        return function(v) {
          return {
            x: v.clientX,
            y: v.clientY
          };
        };
      })(this));
      prevx = null;
      prevy = null;
      mup.onValue((function(_this) {
        return function() {
          prevx = null;
          return prevy = null;
        };
      })(this));
      mouse = mdown.merge(mup).combine(mmove, (function(_this) {
        return function(f, s) {
          return $.extend(f, s);
        };
      })(this)).filter((function(_this) {
        return function(v) {
          return v.mstate === "down";
        };
      })(this)).map((function(_this) {
        return function(v) {
          var r;
          if ((prevx != null) && (prevy != null)) {
            r = $.extend(v, {
              offsetx: v.x - prevx,
              offsety: v.y - prevy
            });
          } else {
            r = v;
          }
          prevx = v.x;
          prevy = v.y;
          return r;
        };
      })(this));
      return mouse.filter((function(_this) {
        return function(v) {
          return (v.offsetx != null) && (v.offsety != null);
        };
      })(this)).onValue((function(_this) {
        return function(v) {
          _this.app.data.set("gridOffsetX", _this.app.data.get("gridOffsetX") + v.offsetx);
          return _this.app.data.set("gridOffsetY", _this.app.data.get("gridOffsetY") + v.offsety);
        };
      })(this));
    };

    Grid.prototype.template = function(rows) {
      return "<div class=\"grid\">\n  " + rows + "\n</div>";
    };

    Grid.prototype.templateCell = function(x, y) {
      var xy;
      xy = "x=\"" + x + "\" y=\"" + y + "\"";
      return "<div class=\"grid__col\" " + xy + " cell></div>";
    };

    Grid.prototype.templateRow = function(cols) {
      return "<div class=\"grid__row\">" + cols + "</div>";
    };

    return Grid;

  })(levelEditor.Object);

}).call(this);
