// Generated by CoffeeScript 1.7.1

/*
  Level cells data
 */

(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  levelEditor.data.LevelCells = (function(_super) {
    __extends(LevelCells, _super);

    LevelCells.prototype.DT = "levelEditor.data.LevelCells";

    function LevelCells() {
      this.getCellIndex = __bind(this.getCellIndex, this);
      this.isCellBelongs = __bind(this.isCellBelongs, this);
      this.removeCell = __bind(this.removeCell, this);
      this.addCell = __bind(this.addCell, this);
      this.init = __bind(this.init, this);
      LevelCells.__super__.constructor.apply(this, arguments);
      console.log(this.DT, "Init.");
    }

    LevelCells.prototype.init = function() {
      LevelCells.__super__.init.apply(this, arguments);
      return this.set("levelCells", []);
    };

    LevelCells.prototype.addCell = function(cell) {
      if (!this.isCellBelongs(cell)) {
        return this.tarray.push("levelCells", cell);
      }
    };

    LevelCells.prototype.removeCell = function(cell) {
      var i;
      i = this.getCellIndex(cell);
      if (i !== -1) {
        return this.tarray["delete"]("levelCells", i);
      }
    };

    LevelCells.prototype.isCellBelongs = function(cell) {
      return this.getCellIndex(cell) !== -1;
    };

    LevelCells.prototype.getCellIndex = function(cell) {
      return _.findIndex(this.get("levelCells"), cell);
    };

    return LevelCells;

  })(chms.ard.AbstractReactiveData);

}).call(this);
