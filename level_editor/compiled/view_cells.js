// Generated by CoffeeScript 1.7.1

/*
  Cells of the grid
 */

(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  levelEditor.view.Cells = (function(_super) {
    __extends(Cells, _super);

    Cells.prototype.DT = "levelEditor.view.Cells";

    function Cells(grid, app) {
      this.grid = grid;
      this.app = app;
      this.interactionGridClick = __bind(this.interactionGridClick, this);
      this.stateInit = __bind(this.stateInit, this);
      Cells.__super__.constructor.apply(this, arguments);
      console.log(this.DT, "Init.");
      this.dUiModes = this.app.data.get("ui-modes");
      this.stateInit();
      this.interactionGridClick();
    }

    Cells.prototype.stateInit = function() {
      this.state = new chms.ard.AbstractReactiveData();
      return this.state.set("selected", []);
    };

    Cells.prototype.interactionGridClick = function() {
      return this.grid.asEventStream("click").map((function(_this) {
        return function(v) {
          return {
            el: $(v.target)
          };
        };
      })(this)).filter((function(_this) {
        return function(v) {
          return v.el.attr("cell") != null;
        };
      })(this)).filter((function(_this) {
        return function() {
          return _this.dUiModes.get("currentMode") === _this.dUiModes.s.MODE_SELECT;
        };
      })(this)).onValue((function(_this) {
        return function(v) {
          var i, xy;
          xy = _this.s.getCellXYByEl(v.el);
          if ((i = _.findIndex(_this.state.get("selected"), xy)) === -1) {
            return _this.state.tarray.push("selected", xy);
          } else {
            return _this.state.tarray["delete"]("selected", i);
          }
        };
      })(this));
    };

    Cells.getCellXYByEl = function(el) {
      return [el.attr("x"), el.attr("y")];
    };

    return Cells;

  })(levelEditor.Object);

}).call(this);
