// Generated by CoffeeScript 1.7.1

/*
 Namespaces
 */

(function() {
  if (window.chms == null) {
    window.chms = {};
  }

  if (window.chms.ard == null) {
    window.chms.ard = {};
  }

}).call(this);
// Generated by CoffeeScript 1.7.1

/*
 Abstract object - parent of all objects
 */

(function() {
  chms.ard.AbstractObject = (function() {
    function AbstractObject() {
      this.s = this.constructor;
    }

    return AbstractObject;

  })();

}).call(this);
// Generated by CoffeeScript 1.7.1

/*
 Array data type
 */

(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  chms.ard.ARDArray = (function(_super) {
    __extends(ARDArray, _super);

    ARDArray.I_DATA_INSERTED = "chms-ard-ARDArray:DataInserted";

    ARDArray.I_DATA_DELETED = "chms-ard-ARDArray:DataDeleted";

    ARDArray.I_DATA_CONCATED = "chms-ard-ARDArray:DataConcated";

    ARDArray.ERROR_NOT_AN_ARRAY = new Error("Not an array!");

    ARDArray.ERROR_INDEX_OUT_OF_BOUNDS = new Error("Index out of bounds!");

    function ARDArray(ard) {
      this.ard = ard;
      this.isArray = __bind(this.isArray, this);
      this.checkOutOfBounds = __bind(this.checkOutOfBounds, this);
      this.checkArray = __bind(this.checkArray, this);
      this.concat = __bind(this.concat, this);
      this.push = __bind(this.push, this);
      this["delete"] = __bind(this["delete"], this);
      this.insert = __bind(this.insert, this);
      ARDArray.__super__.constructor.apply(this, arguments);
    }

    ARDArray.prototype.insert = function(key, index, val, flags) {
      var cv, setter;
      if (flags == null) {
        flags = {};
      }
      this.checkArray(key);
      this.checkOutOfBounds(key, index);
      cv = this.ard.get(key);
      cv = cv.slice(0, index).concat(val).concat(cv.slice(index));
      setter = (function(_this) {
        return function() {
          _this.ard._data[key] = cv;
          return _this.ard.sendImpuls(_this.s.I_DATA_INSERTED, key, {
            value: cv,
            inserted: val,
            index: index,
            flags: flags
          });
        };
      })(this);
      return this.ard.change(key, setter, cv, flags);
    };

    ARDArray.prototype["delete"] = function(key, index, flags) {
      var cv, dl, setter;
      if (flags == null) {
        flags = {};
      }
      this.checkArray(key);
      this.checkOutOfBounds(key, index);
      cv = this.ard.get(key);
      dl = cv[index];
      cv = cv.filter((function(_this) {
        return function(e, i) {
          return i !== index;
        };
      })(this));
      setter = (function(_this) {
        return function() {
          _this.ard._data[key] = cv;
          return _this.ard.sendImpuls(_this.s.I_DATA_DELETED, key, {
            value: cv,
            index: index,
            deleted: dl,
            flags: flags
          });
        };
      })(this);
      return this.ard.change(key, setter, cv, flags);
    };

    ARDArray.prototype.push = function(key, val, flags) {
      var setter;
      if (flags == null) {
        flags = {};
      }
      this.checkArray(key);
      setter = (function(_this) {
        return function() {
          var nv;
          _this.ard._data[key].push(val);
          nv = _this.ard._data[key];
          return _this.ard.sendImpuls(_this.s.I_DATA_INSERTED, key, {
            value: nv,
            index: nv.length - 1,
            inserted: val,
            flags: flags
          });
        };
      })(this);
      return this.ard.change(key, setter);
    };

    ARDArray.prototype.concat = function(key, val, flags) {
      var setter;
      if (flags == null) {
        flags = {};
      }
      this.checkArray(key);
      setter = (function(_this) {
        return function() {
          _this.ard._data[key] = _this.ard._data[key].concat(val);
          return _this.ard.sendImpuls(_this.s.I_DATA_CONCATED, key, {
            concated: val,
            flags: flags
          });
        };
      })(this);
      return this.ard.change(key, setter, this.ard.get(key), flags);
    };

    ARDArray.prototype.checkArray = function(key) {
      if (!this.isArray(key)) {
        throw this.s.ERROR_NOT_AN_ARRAY;
      }
    };

    ARDArray.prototype.checkOutOfBounds = function(key, index) {
      if (index < 0 || (index >= this.ard.get(key).length)) {
        throw this.s.ERROR_INDEX_OUT_OF_BOUNDS;
      }
    };

    ARDArray.prototype.isArray = function(key) {
      return $.isArray(this.ard.get(key));
    };

    return ARDArray;

  })(chms.ard.AbstractObject);

}).call(this);
// Generated by CoffeeScript 1.7.1

/*
 Abstract reactive data main class
 */

(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  chms.ard.AbstractReactiveData = (function() {
    AbstractReactiveData.I_BEFORE_DATA_CHANGE = "impuls.BeforeDataChange";

    AbstractReactiveData.I_DATA_CHANGED = "impuls.DataChanged";

    AbstractReactiveData.I_BASE = "impuls.Base";

    AbstractReactiveData.I_NOTIFICATION = "impuls.Notification";

    AbstractReactiveData.I_DATA_ADDED = "impuls.DataAdded";

    function AbstractReactiveData() {
      this.sendImpuls = __bind(this.sendImpuls, this);
      this.notify = __bind(this.notify, this);
      this.get = __bind(this.get, this);
      this.change = __bind(this.change, this);
      this.set = __bind(this.set, this);
      this.initDataTypes = __bind(this.initDataTypes, this);
      this.init = __bind(this.init, this);
      this.s = this.constructor;
      this.init();
      this.initDataTypes();
    }

    AbstractReactiveData.prototype.init = function() {
      return this._data = {};
    };

    AbstractReactiveData.prototype.initDataTypes = function() {
      return this.tarray = new chms.ard.ARDArray(this);
    };

    AbstractReactiveData.prototype.set = function(key, val, flags) {
      if (flags == null) {
        flags = {};
      }
      this.change(key, ((function(_this) {
        return function() {
          return _this._data[key] = val;
        };
      })(this)), val, flags);
      return true;
    };

    AbstractReactiveData.prototype.change = function(key, setter, next, flags) {
      var bd, pv;
      if (flags == null) {
        flags = {};
      }
      pv = this.get(key);
      bd = {
        value: pv
      };
      if (next != null) {
        bd.next = next;
      }
      bd.flags = flags;
      this.sendImpuls(this.s.I_BEFORE_DATA_CHANGE, key, bd);
      setter(key);
      return this.sendImpuls(this.s.I_DATA_CHANGED, key, {
        prevValue: pv,
        flags: flags
      });
    };

    AbstractReactiveData.prototype.get = function(key) {
      return this._data[key];
    };

    AbstractReactiveData.prototype.notify = function(key) {
      return this.sendImpuls(this.s.I_NOTIFICATION, key);
    };

    AbstractReactiveData.prototype.sendImpuls = function(type, key, additionalData) {
      var data;
      if (additionalData == null) {
        additionalData = {};
      }
      if (type !== this.s.I_BASE) {
        this.sendImpuls(this.s.I_BASE, key, {
          actualImpuls: type
        });
      }
      data = {
        type: type,
        key: key,
        value: this.get(key)
      };
      data = $.extend(data, additionalData);
      return $(this).trigger(data);
    };

    return AbstractReactiveData;

  })();

}).call(this);