// Generated by CoffeeScript 1.7.1

/*
  Faces editor
 */

(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.FacesEditor = (function() {
    function FacesEditor(el) {
      this.el = el;
      this.update = __bind(this.update, this);
      this.s = this.constructor;
      this.isouth = this.el.find("#faceSouth");
      this.ieast = this.el.find("#faceEast");
      this.inorth = this.el.find("#faceNorth");
      this.iwest = this.el.find("#faceWest");
      this.fdict = {
        s: this.isouth,
        e: this.ieast,
        n: this.inorth,
        w: this.iwest
      };
      this.bupdate = this.el.find("[update]");
      this.bupdate.on("click", this.update);
    }

    FacesEditor.prototype.update = function() {
      var cell, ci, input, key, selected, xy, _i, _len, _results;
      selected = $("[cell].-selected");
      _results = [];
      for (_i = 0, _len = selected.length; _i < _len; _i++) {
        cell = selected[_i];
        cell = $(cell);
        xy = getXYfromCell(cell);
        ci = getIndex(xy.x, xy.y);
        cell.addClass("level-cell");
        level[ci] = makeCell(xy.x, xy.y);
        _results.push((function() {
          var _ref, _results1;
          _ref = this.fdict;
          _results1 = [];
          for (key in _ref) {
            input = _ref[key];
            if (input.val() !== "") {
              _results1.push(level[ci][key] = {
                face: input.val(),
                type: 'wall'
              });
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    return FacesEditor;

  })();

}).call(this);
