// Generated by CoffeeScript 1.7.1

/*
  Round system
 */

(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  gameLogic.entities.Time = (function(_super) {
    __extends(Time, _super);

    Time.prototype.DT = "gameLogic.entities.Time";

    function Time(app) {
      this.app = app;
      this.stateTurn = __bind(this.stateTurn, this);
      this.stateUpdated = __bind(this.stateUpdated, this);
      Time.__super__.constructor.apply(this, arguments);
      console.log(this.DT, "Init.");
      this.data = new gameLogic.data.Time();
    }

    Time.ROUND_STATE_START = "start";

    Time.ROUND_STATE_TURN = "turn";

    Time.ROUND_STATE_END = "end";

    Time.TURN_TIME = 5000;

    Time.TURN_AFTERTIME = 300;

    Time.prototype.stateUpdated = function() {
      switch (this.data.get("state")) {
        case this.s.ROUND_STATE_START:
          this.data.set("state", this.s.ROUND_STATE_TURN);
          return this.stateUpdated();
        case this.s.ROUND_STATE_TURN:
          return this.stateTurn(this.app.world.getActors());
        case this.s.ROUND_STATE_END:
          this.data.set("state", this.s.ROUND_STATE_START);
          return this.stateUpdated();
      }
    };

    Time.prototype.stateTurn = function(actors) {
      var completed, p, turnTimeout;
      if (actors.length === 0) {
        return setTimeout(((function(_this) {
          return function() {
            return _this.data.set("state", _this.s.ROUND_STATE_END);
          };
        })(this)), this.TURN_AFTERTIME);
      } else {
        p = actors[0];
        completed = (function(_this) {
          return function() {
            p.turnEnded();
            clearTimeout(turnTimeout);
            return _this.stateTurn(actors.slice(1));
          };
        })(this);
        turnTimeout = setTimeout(p.noop, this.s.TURN_TIME);
        $(p).one(p.I_ACTION_COMPLETED, completed);
        return p.turnStart();
      }
    };

    return Time;

  })(gameLogic.Object);

}).call(this);
