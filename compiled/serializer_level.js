// Generated by CoffeeScript 1.7.1

/*
  Level serializer
 */

(function() {
  utils.serializers.Level = {
    serializeGeometry: function(level) {
      var cell, cells, cid, d, h, serialized, xcell, xcells, _i, _len;
      h = utils.helpers.Level;
      serialized = {};
      cells = level.get("levelCells");
      for (_i = 0, _len = cells.length; _i < _len; _i++) {
        cell = cells[_i];
        xcells = h.getCrossCellsForCell(cell);
        cid = h.getCellId(cell);
        serialized[cid] = {
          x: cell[0],
          y: cell[1]
        };
        for (d in xcells) {
          xcell = xcells[d];
          if (!level.isCellBelongs(xcell)) {
            serialized[cid][d] = {
              face: "black-wall",
              type: "wall"
            };
          }
        }
      }
      return serialized;
    },
    serializeToString: function(level) {
      var actors, container, geometry;
      geometry = utils.serializers.Level.serializeGeometry(level);
      actors = [];
      container = dataTypes.Level.get(geometry, actors);
      return JSON.stringify(container);
    },
    parseSerializedGeometry: function(geometry) {
      var cell, cid, level;
      level = [];
      for (cid in geometry) {
        cell = geometry[cid];
        level.push([cell.x, cell.y]);
      }
      return level;
    },
    parseSerializedFromString: function(serialized) {
      var actors, geometry, level;
      level = JSON.parse(serialized);
      geometry = utils.serializers.Level.parseSerializedGeometry(level.geometry);
      actors = [];
      return dataTypes.Level.get(geometry, actors);
    },
    serializeGeometryToWorldTree: function(levelObj) {
      var cell, id, serialized;
      serialized = {};
      for (id in levelObj) {
        cell = levelObj[id];
        if (serialized[cell.x] == null) {
          serialized[cell.x] = {};
        }
        serialized[cell.x][cell.y] = {
          n: cell["n"],
          s: cell["s"],
          w: cell["w"],
          e: cell["e"]
        };
      }
      return serialized;
    }
  };

}).call(this);
