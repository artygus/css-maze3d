// Generated by CoffeeScript 1.7.1

/*
  Game session controls interactions between render, game logic, controls, etc.
 */

(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  gameSession.App = (function(_super) {
    __extends(App, _super);

    App.prototype.DT = "gameSession.App";

    function App() {
      this.start = __bind(this.start, this);
      this.cameraUpdate = __bind(this.cameraUpdate, this);
      this.renderLevelActors = __bind(this.renderLevelActors, this);
      this.renderLevelGeometry = __bind(this.renderLevelGeometry, this);
      this.loadLevelActors = __bind(this.loadLevelActors, this);
      this.loadLevelGeometry = __bind(this.loadLevelGeometry, this);
      this.setLevel = __bind(this.setLevel, this);
      this.linkGameLogicToRender = __bind(this.linkGameLogicToRender, this);
      this.initControls = __bind(this.initControls, this);
      this.initRender = __bind(this.initRender, this);
      App.__super__.constructor.apply(this, arguments);
      this.gl = new gameLogic.App();
    }

    App.prototype.initRender = function() {
      var cameraEl, unit, viewportEl, worldEl;
      unit = 100;
      worldEl = document.getElementById('world');
      cameraEl = document.getElementById('camera');
      viewportEl = document.getElementById('viewport');
      this.render = new Renderer(worldEl, unit);
      return this.camera = new GameCamera(viewportEl, worldEl, cameraEl, unit);
    };

    App.prototype.initControls = function() {
      keyboardJS.bind("w", (function(_this) {
        return function(e) {
          return _this.gl.player.actionMoveForward();
        };
      })(this));
      keyboardJS.bind("s", (function(_this) {
        return function(e) {
          return _this.gl.player.actionMoveBackward();
        };
      })(this));
      keyboardJS.bind("a", (function(_this) {
        return function(e) {
          return _this.gl.player.actionStrafeLeft();
        };
      })(this));
      keyboardJS.bind("d", (function(_this) {
        return function(e) {
          return _this.gl.player.actionStrafeRight();
        };
      })(this));
      keyboardJS.bind("q", (function(_this) {
        return function(e) {
          return _this.gl.player.actionTurnAntiClockwise();
        };
      })(this));
      keyboardJS.bind("e", (function(_this) {
        return function(e) {
          return _this.gl.player.actionTurnClockwise();
        };
      })(this));
      return keyboardJS.bind("space", (function(_this) {
        return function(e) {
          return _this.gl.player.actionAttack();
        };
      })(this));
    };

    App.prototype.linkGameLogicToRender = function() {
      var actors, sActorsChanged;
      actors = this.gl.world.data.get("actors");
      sActorsChanged = $(actors).asEventStream(actors.s.I_DATA_CHANGED);
      sActorsChanged.filter((function(_this) {
        return function(v) {
          return v.key === "mdata";
        };
      })(this)).onValue((function(_this) {
        return function() {
          return setTimeout(_this.cameraUpdate, 1);
        };
      })(this));
      return $(actors).asEventStream(actors.tobject.s.I_DATA_DELETED).onValue((function(_this) {
        return function(v) {
          if (v.deleted.actor.isDead()) {
            return _this.render.removeModel(v.deleted.actor.getModel().get()[0]);
          }
        };
      })(this));
    };

    App.prototype.setLevel = function(level) {
      return this.level = level;
    };

    App.prototype.loadLevelGeometry = function() {
      return this.gl.world.load(this.level.geometry);
    };

    App.prototype.loadLevelActors = function() {
      var actor, entry, _i, _len, _ref, _results;
      _ref = this.level.actors;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entry = _ref[_i];
        actor = this.gl.createActorById(entry.actor);
        _results.push(this.gl.world.placeActor(entry.cell, actor, entry.dir));
      }
      return _results;
    };

    App.prototype.renderLevelGeometry = function() {
      return this.render.cells(this.level.geometry);
    };

    App.prototype.renderLevelActors = function() {
      var actor, model, pos, _i, _len, _ref, _results;
      _ref = this.gl.world.getActors();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        actor = _ref[_i];
        pos = actor.getPosition();
        model = actor.getModel().get();
        if (model != null) {
          _results.push(this.render.modelPlace(model, pos.cell, pos.dir));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    App.prototype.cameraUpdate = function() {
      var pos;
      pos = this.gl.world.data.get("actors").getDataByEntity(this.gl.player);
      this.camera.setCell(pos.cell[0], pos.cell[1]);
      this.camera.setDirection(pos.dir);
      return this.camera.camera.update();
    };

    App.prototype.start = function() {
      this.initRender();
      this.initControls();
      this.loadLevelGeometry();
      this.loadLevelActors();
      this.renderLevelGeometry();
      this.renderLevelActors();
      this.linkGameLogicToRender();
      this.cameraUpdate();
      return this.gl.time.create();
    };

    return App;

  })(abstract.Object);

}).call(this);
